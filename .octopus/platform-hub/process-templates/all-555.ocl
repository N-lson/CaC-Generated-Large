name = "All steps"
description = "Contains every configurable built in step, except for Step Package Framework steps"

icon {
    color = "#173B56"
    id = "football-helmet"
}

parameter "LinuxWorkerPoolParameter" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = ""
    label = "Linux worker pool parameter"
}

parameter "Sensitive" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = ""
    label = ""
}

parameter "PackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "TargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "NginxPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "ProjectIdParameter" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = ""
}

parameter "ContainerFeedParameter" {
    display_settings = {
        Octopus.ControlType = "Feed"
    }
    help_text = ""
    label = ""
}

parameter "AzureAccountParameter" {
    display_settings = {
        Octopus.ControlType = "AzureAccount"
    }
    help_text = ""
    label = ""
}

parameter "WindowsServicePackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "AwsAccountParameter" {
    display_settings = {
        Octopus.ControlType = "AmazonWebServicesAccount"
    }
    help_text = ""
    label = ""
}

parameter "CertificateParameter" {
    display_settings = {
        Octopus.ControlType = "Certificate"
    }
    help_text = ""
    label = ""
}

parameter "AzureWebAppTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "WindowsWorkerPoolParameter" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = ""
    label = ""
}

parameter "LocalTentacleTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "HelmPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "JavaPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "LocalLinuxTentacleTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "GoogleCloudAccountParameter" {
    display_settings = {
        Octopus.ControlType = "GoogleCloudAccount"
    }
    help_text = ""
    label = ""
}

parameter "ServiceFabricTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "ServiceFabricPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "NginxTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

parameter "VHDPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "TomcatManagerPasswordParameter" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = ""
    label = ""
}

parameter "TomcatPackageParameter" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = ""
    label = ""
}

parameter "WildflyManagementPasswordParameter" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = ""
    label = ""
}

parameter "VHDTargetTagParameter" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = ""
}

step "manual-intervention-required" {
    name = "Manual Intervention Required"

    action {
        action_type = "Octopus.Manual"
        is_disabled = true
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Some manual instructions"
        }
        worker_pool_variable = ""
    }
}

step "jira-service-desk-change-request" {
    name = "Jira Service Desk Change Request"

    action {
        action_type = "Octopus.JiraIntegration.ServiceDeskAction"
        is_disabled = true
        properties = {
            Octopus.Action.JiraIntegration.ServiceDesk.ServiceId = "#{Sensitive}"
        }
        worker_pool_variable = ""
    }
}

step "health-check" {
    name = "Health Check"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.HealthCheck"
        is_disabled = true
        properties = {
            Octopus.Action.HealthCheck.ErrorHandling = "TreatExceptionsAsErrors"
            Octopus.Action.HealthCheck.IncludeMachinesInDeployment = "IncludeCheckedMachines"
            Octopus.Action.HealthCheck.Type = "FullHealthCheck"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"
    }
}

step "send-an-email" {
    name = "Send an Email"

    action {
        action_type = "Octopus.Email"
        is_disabled = true
        properties = {
            Octopus.Action.Email.Body = "Some body"
            Octopus.Action.Email.Subject = "This is the subject!"
            Octopus.Action.Email.ToTeamIds = "global/everyone"
        }
        worker_pool_variable = ""
    }
}

step "transfer-a-package" {
    name = "Transfer a Package"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.TransferPackage"
        properties = {
            Octopus.Action.Package.TransferPath = "C:\\Temp"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-a-script" {
    name = "Run a Script"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.Script"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables,Octopus.Features.ConfigurationVariables,Octopus.Features.ConfigurationTransforms,Octopus.Features.SubstituteInFiles,Octopus.Features.SelectPowerShellEditionForWindows"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "variable-replacement.json"
            Octopus.Action.PowerShell.Edition = "Desktop"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = "echo \"Hello World\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"
    }
}

step "deploy-a-package" {
    name = "Deploy a Package"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "False"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Pod
                metadata:
                  name: hello-web
                  labels:
                    app: hello-web
                spec:
                  containers:
                    - name: nginx
                      image: nginx:alpine
                      ports:
                        - containerPort: 80
                
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: hello-web-service
                spec:
                  selector:
                    app: hello-web
                  type: NodePort
                  ports:
                    - port: 80
                      targetPort: 80
                      nodePort: 30007  # You can access this on localhost:30007
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "aa.yaml"
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "PackageParameter" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "false"
                PackageParameterName = "PackageParameter"
                Purpose = "DockerImageReference"
                SelectionMode = "deferred"
            }
        }
    }
}

step "shortconfig" {
    name = "Configure and apply Kubernetes resources"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action "configure" {
        action_type = "Octopus.KubernetesDeployContainers"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress,Octopus.Features.KubernetesConfigMap,Octopus.Features.KubernetesSecret"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.Containers = <<-EOT
                [
                 {
                  "Name": "nginx",
                  "FeedId": "",
                  "Ports": [],
                  "EnvironmentVariables": [],
                  "SecretEnvironmentVariables": [],
                  "ConfigMapEnvironmentVariables": [],
                  "FieldRefEnvironmentVariables": [],
                  "ConfigMapEnvFromSource": [],
                  "SecretEnvFromSource": [],
                  "VolumeMounts": [],
                  "Resources": {
                   "requests": {
                    "memory": "",
                    "cpu": "",
                    "ephemeralStorage": "",
                    "amdGpu": "",
                    "nvidiaGpu": "",
                    "storage": ""
                   },
                   "limits": {
                    "memory": "",
                    "cpu": "",
                    "ephemeralStorage": "",
                    "amdGpu": "",
                    "nvidiaGpu": "",
                    "storage": ""
                   }
                  },
                  "LivenessProbe": {
                   "failureThreshold": "",
                   "initialDelaySeconds": "",
                   "periodSeconds": "",
                   "successThreshold": "",
                   "timeoutSeconds": "",
                   "type": "",
                   "exec": {
                    "command": []
                   },
                   "httpGet": {
                    "host": "",
                    "path": "",
                    "port": "",
                    "scheme": "",
                    "httpHeaders": []
                   },
                   "tcpSocket": {
                    "host": "",
                    "port": ""
                   }
                  },
                  "ReadinessProbe": {
                   "failureThreshold": "",
                   "initialDelaySeconds": "",
                   "periodSeconds": "",
                   "successThreshold": "",
                   "timeoutSeconds": "",
                   "type": "",
                   "exec": {
                    "command": []
                   },
                   "httpGet": {
                    "host": "",
                    "path": "",
                    "port": "",
                    "scheme": "",
                    "httpHeaders": []
                   },
                   "tcpSocket": {
                    "host": "",
                    "port": ""
                   }
                  },
                  "StartupProbe": {
                   "failureThreshold": "",
                   "initialDelaySeconds": "",
                   "periodSeconds": "",
                   "successThreshold": "",
                   "timeoutSeconds": "",
                   "type": "",
                   "exec": {
                    "command": []
                   },
                   "httpGet": {
                    "host": "",
                    "path": "",
                    "port": "",
                    "scheme": "",
                    "httpHeaders": []
                   },
                   "tcpSocket": {
                    "host": "",
                    "port": ""
                   }
                  },
                  "Command": [],
                  "Args": [],
                  "SecurityContext": {
                   "allowPrivilegeEscalation": "",
                   "privileged": "",
                   "readOnlyRootFilesystem": "",
                   "runAsGroup": "",
                   "runAsNonRoot": "",
                   "runAsUser": "",
                   "capabilities": {
                    "add": [],
                    "drop": []
                   },
                   "seLinuxOptions": {
                    "level": "",
                    "role": "",
                    "type": "",
                    "user": ""
                   }
                  },
                  "TerminationMessagePath": "",
                  "TerminationMessagePolicy": "",
                  "Lifecycle": {
                   "PreStop": null,
                   "PostStart": null
                  },
                  "CreateFeedSecrets": "True"
                 }
                ]
                EOT
            Octopus.Action.KubernetesContainers.DeploymentName = "shortdeployment"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.Replicas = "1"
            Octopus.Action.KubernetesContainers.RestartPolicy = "Always"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
        }
        worker_pool_variable = ""

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "NginxPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "configsecret" {
    name = "Configure and apply a Kubernetes Secret"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesDeploySecret"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.DeploymentLabels = "{\"LetsTryALabel\":\"123\"}"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
            Octopus.Action.KubernetesContainers.SecretName = "i-am-a-secret"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"key\":\"123123\"}"
        }
        worker_pool_variable = ""
    }
}

step "ingress" {
    name = "Configure and apply a Kubernetes Ingress"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesDeployIngress"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.DefaultRulePort = "10000"
            Octopus.Action.KubernetesContainers.DefaultRuleServiceName = "servicename"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
            Octopus.Action.KubernetesContainers.IngressName = "testingress"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
        }
        worker_pool_variable = ""
    }
}

step "service" {
    name = "Configure and apply a Kubernetes Service"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesDeployService"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
            Octopus.Action.KubernetesContainers.ServiceName = "testservice"
            Octopus.Action.KubernetesContainers.ServicePorts = "[{\"name\":\"http\",\"port\":\"1000\",\"targetPort\":\"1000\",\"nodePort\":\"\",\"protocol\":\"TCP\"}]"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
        }
        worker_pool_variable = ""
    }
}

step "configmap" {
    name = "Configure and apply a Kubernetes ConfigMap"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesDeployConfigMap"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.ConfigMapName = "testconfigmap"
            Octopus.Action.KubernetesContainers.ConfigMapValues = "{\"testkey\":\"felixi\"}"
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
        }
        worker_pool_variable = ""
    }
}

step "deploy-a-release" {
    name = "Deploy a Release"

    action {
        action_type = "Octopus.DeployRelease"
        is_disabled = true
        properties = {
            Octopus.Action.DeployRelease.DeploymentCondition = "Always"
            Octopus.Action.DeployRelease.ProjectId = "#{ProjectIdParameter}"
            Octopus.Action.DeployRelease.Variables = "{\"TestVariable\":\"OverriddenByProcessTemplate\"}"
        }
        worker_pool_variable = ""
    }
}

step "deploy-to-iis" {
    name = "Deploy to IIS"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.IIS"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.IISWebSite,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.IISWebSite.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.ApplicationPoolName = "testapppool"
            Octopus.Action.IISWebSite.Bindings = "[{\"protocol\":\"http\",\"port\":\"10000\",\"host\":\"\",\"thumbprint\":null,\"certificateVariable\":null,\"requireSni\":\"False\",\"enabled\":\"True\"}]"
            Octopus.Action.IISWebSite.CreateOrUpdateWebSite = "True"
            Octopus.Action.IISWebSite.DeploymentType = "webSite"
            Octopus.Action.IISWebSite.EnableAnonymousAuthentication = "False"
            Octopus.Action.IISWebSite.EnableBasicAuthentication = "False"
            Octopus.Action.IISWebSite.EnableWindowsAuthentication = "True"
            Octopus.Action.IISWebSite.StartApplicationPool = "True"
            Octopus.Action.IISWebSite.StartWebSite = "True"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.WebRootType = "packageRoot"
            Octopus.Action.IISWebSite.WebSiteName = "testwebsite"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-an-azure-script" {
    name = "Run an Azure Script"

    action {
        action_type = "Octopus.AzurePowerShell"
        is_disabled = true
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccountParameter}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = "az account show"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages "PackageParameter" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "PackageParameter"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-an-aws-cli-script" {
    name = "Run an AWS CLI Script"

    action {
        action_type = "Octopus.AwsRunScript"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{AwsAccountParameter}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                "Hello world"
                
                aws s3 ls
                aws cloudformation list-stacks
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages "PackageParameter" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "PackageParameter"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "import-certificate" {
    name = "Import Certificate"
    properties = {
        Octopus.Action.MaxParallelism = "1"
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.Certificate.Import"
        is_disabled = true
        properties = {
            Octopus.Action.Certificate.PrivateKeyAccessRules = "[{\"Identity\":\"armada\",\"Access\":\"ReadOnly\"}]"
            Octopus.Action.Certificate.PrivateKeyExportable = "True"
            Octopus.Action.Certificate.StoreLocation = "LocalMachine"
            Octopus.Action.Certificate.StoreName = "My"
            Octopus.Action.Certificate.Variable = "#{CertificateParameter}"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-web-app-web-deploy" {
    name = "Deploy an Azure Web App (Web Deploy)"
    properties = {
        Octopus.Action.TargetRoles = "#{AzureWebAppTargetTagParameter}"
    }

    action {
        action_type = "Octopus.AzureWebApp"
        is_disabled = true
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccountParameter}"
            Octopus.Action.Azure.IsLegacyMode = "True"
            Octopus.Action.Azure.UseChecksum = "False"
            Octopus.Action.Azure.WebAppName = "felixwebapp"
            Octopus.Action.RunOnServer = "true"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{WindowsWorkerPoolParameter}"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-an-azure-app-service" {
    name = "Deploy an Azure App Service"
    properties = {
        Octopus.Action.TargetRoles = "#{AzureWebAppTargetTagParameter}"
    }

    action {
        action_type = "Octopus.AzureAppService"
        is_disabled = true
        properties = {
            Octopus.Action.Azure.DeploymentType = "Package"
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables,Octopus.Features.ConfigurationTransforms,Octopus.Features.SubstituteInFiles"
            Octopus.Action.RunOnServer = "true"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-a-docker-container" {
    name = "Run a Docker Container"
    properties = {
        Octopus.Action.TargetRoles = "#{LocalTentacleTargetTagParameter}"
    }

    action {
        action_type = "Octopus.DockerRun"
        is_disabled = true
        properties = {
            Octopus.Action.Docker.PortAutoMap = "False"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "NginxPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "stop-a-docker-resource" {
    name = "Stop a Docker Resource"
    properties = {
        Octopus.Action.TargetRoles = "#{LocalTentacleTargetTagParameter}"
    }

    action {
        action_type = "Octopus.DockerStop"
        is_disabled = true
        properties = {
            Octopus.Action.Docker.Remove = "True"
            Octopus.Action.Docker.RemoveCustomTags = "{}"
            Octopus.Action.Docker.RemoveSteps = "run-a-docker-container"
        }
        worker_pool_variable = ""
    }
}

step "plan-to-apply-a-terraform-template" {
    name = "Plan to apply a Terraform template"

    action {
        action_type = "Octopus.TerraformPlan"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.AwsAccount.UseInstanceRole = "True"
            Octopus.Action.AzureAccount.Variable = "#{AzureAccountParameter}"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "False"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.EnvVariables = "{}"
            Octopus.Action.Terraform.GoogleCloudAccount = "True"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.Template = <<-EOT
                output "hello" {
                  value = "This is the token I am using: ${var.custom_token}!"
                }
                
                variable "custom_token" {
                  type    = string
                  default = "No token"
                }
                EOT
            Octopus.Action.Terraform.TemplateParameters = "{\"custom_token\":\"No token\"}"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages "NginxPackageParameter" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "false"
                PackageParameterName = "NginxPackageParameter"
                Purpose = "DockerImageReference"
                SelectionMode = "deferred"
            }
        }
    }
}

step "apply-a-terraform-template" {
    name = "Apply a Terraform template"

    action {
        action_type = "Octopus.TerraformApply"
        is_disabled = true
        properties = {
            Octopus.Action.AzureAccount.Variable = "#{AzureAccountParameter}"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.Template = <<-EOT
                output "hello" {
                  value = "This is the token I am using: ${var.custom_token}!"
                }
                
                variable "custom_token" {
                  type    = string
                  default = "No token"
                }
                EOT
            Octopus.Action.Terraform.TemplateParameters = "{\"custom_token\":\"No token\"}"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "destroy-terraform-resources" {
    name = "Destroy Terraform resources"

    action {
        action_type = "Octopus.TerraformDestroy"
        is_disabled = true
        properties = {
            Octopus.Action.AzureAccount.Variable = "#{AzureAccountParameter}"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.Template = <<-EOT
                output "hello" {
                  value = "This is the token I am using: ${var.custom_token}!"
                }
                
                variable "custom_token" {
                  type    = string
                  default = "No token"
                }
                EOT
            Octopus.Action.Terraform.TemplateParameters = "{\"custom_token\":\"No token\"}"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "delete-an-aws-cloudformation-stack" {
    name = "Delete an AWS CloudFormation stack"

    action {
        action_type = "Octopus.AwsDeleteCloudFormation"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "felix-cf"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{AwsAccountParameter}"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "deploy-an-aws-cloudformation-template" {
    name = "Deploy an AWS CloudFormation template"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.ChangeSet.Defer = "True"
            Octopus.Action.Aws.CloudFormation.ChangeSet.GenerateName = "False"
            Octopus.Action.Aws.CloudFormation.ChangeSet.Name = "test-changeset"
            Octopus.Action.Aws.CloudFormationStackName = "felix-cf"
            Octopus.Action.Aws.CloudFormationTemplate = "cloudformation.yaml"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.Aws.TemplateSource = "GitRepository"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{AwsAccountParameter}"
            Octopus.Action.EnabledFeatures = "Octopus.Features.CloudFormation.ChangeSet.Feature"
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "cloudformation.yaml"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentialIds-21"
            git_credential_type = "Library"
            repository_uri = "https://github.com/felixi-octopus/Deployables.git"
        }
    }
}

step "apply-an-aws-cloudformation-change-set" {
    name = "Apply an AWS CloudFormation Change Set"

    action {
        action_type = "Octopus.AwsApplyCloudFormationChangeSet"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.ChangeSet.Arn = "test-changeset"
            Octopus.Action.Aws.CloudFormationStackName = "felix-cf"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{AwsAccountParameter}"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "deploy-a-helm-chart" {
    name = "Deploy a Helm Chart"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        is_disabled = true
        properties = {
            Octopus.Action.Helm.Namespace = "allsteps-testing"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "HelmPackageParameter"
                SelectionMode = "deferred"
            }
        }

        packages "NginxPackageParameter" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "false"
                PackageParameterName = "NginxPackageParameter"
                Purpose = "DockerImageReference"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-an-azure-resource-manager-template" {
    name = "Deploy an Azure Resource Manager template"

    action {
        action_type = "Octopus.AzureResourceGroup"
        is_disabled = true
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccountParameter}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "FelixI"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "clusterName": {
                      "type": "string",
                      "defaultValue": "lowcostsfcluster",
                      "metadata": {
                        "description": "Name of your Service Fabric cluster"
                      }
                    },
                    "adminUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "Admin username for the VMs"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Admin password for the VMs"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Azure location"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ServiceFabric/clusters",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('clusterName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Basic",
                        "capacity": 3
                      },
                      "properties": {
                        "reliabilityLevel": "Silver",
                        "upgradeMode": "Automatic",
                        "clusterCodeVersion": "Latest",
                        "certificateCommonNames": {
                          "commonNames": [
                            {
                              "certificateCommonName": "sfcluster.yourdomain.com",
                              "certificateIssuerThumbprint": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                            }
                          ],
                          "x509StoreName": "My"
                        },
                        "fabricSettings": [],
                        "nodeTypes": [
                          {
                            "name": "nt1vm",
                            "clientConnectionEndpointPort": 19000,
                            "httpGatewayEndpointPort": 19080,
                            "applicationPorts": {
                              "startPort": 20000,
                              "endPort": 30000
                            },
                            "ephemeralPorts": {
                              "startPort": 49152,
                              "endPort": 65534
                            },
                            "isPrimary": true,
                            "vmInstanceCount": 3,
                            "durabilityLevel": "Bronze"
                          }
                        ],
                        "managementEndpoint": "[concat('https://', parameters('clusterName'), '.yourdomain.com:19080')]"
                      }
                    }
                  ]
                }
                
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"clusterName\":{\"value\":\"lowcostsfcluster\"},\"adminUsername\":{},\"adminPassword\":{\"reference\":{\"keyVault\":{}}},\"location\":{\"value\":\"[resourceGroup().location]\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            Octopus.Action.RunOnServer = "true"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "create-a-docker-network" {
    name = "Create a Docker Network"
    properties = {
        Octopus.Action.TargetRoles = "#{LocalTentacleTargetTagParameter}"
    }

    action {
        action_type = "Octopus.DockerNetwork"
        is_disabled = true
        properties = {
            Octopus.Action.Docker.NetworkName = "allstepstesting"
            Octopus.Action.Docker.NetworkType = "bridge"
        }
        worker_pool_variable = ""
    }
}

step "run-a-kubectl-script" {
    name = "Run a kubectl script"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        is_disabled = true
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "allsteps-testing"
            Octopus.Action.Script.ScriptBody = "kubectl get pods --all-namespaces"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""

        packages "PackageParameter" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "PackageParameter"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-java-archive" {
    name = "Deploy Java Archive"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.JavaArchive"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.SubstituteInFiles"
            Octopus.Action.JavaArchive.DeployExploded = "True"
            Octopus.Action.Package.CustomInstallationDirectoryShouldBePurgedBeforeDeployment = "False"
            Octopus.Action.Package.JavaArchiveCompression = "True"
            Octopus.Action.Package.UseCustomInstallationDirectory = "False"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "JavaPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-with-kustomize" {
    name = "Deploy with Kustomize"
    properties = {
        Octopus.Action.TargetRoles = "local-minikube-target"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "kustomize/my-app"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentialIds-21"
            git_credential_type = "Library"
            repository_uri = "https://github.com/felixi-octopus/Deployables.git"
        }

        packages "NginxPackageParameter" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "false"
                PackageParameterName = "NginxPackageParameter"
                Purpose = "DockerImageReference"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-a-keystore-to-the-filesystem" {
    name = "Deploy a keystore to the filesystem"
    properties = {
        Octopus.Action.TargetRoles = "#{TargetTagParameter}"
    }

    action {
        action_type = "Octopus.JavaDeployCertificate"
        is_disabled = true
        properties = {
            Java.Certificate.KeystoreFilename = "C:\\Keys\\keystore"
            Java.Certificate.Variable = "#{CertificateParameter}"
        }
        worker_pool_variable = ""
    }
}

step "deploy-to-nginx" {
    name = "Deploy to NGINX"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.Nginx"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.Nginx"
            Octopus.Action.Nginx.Server.Bindings = "[{\"protocol\":\"http\",\"port\":\"80\",\"ipAddress\":\"*\",\"certificateLocation\":null,\"certificateKeyLocation\":null,\"securityProtocols\":null,\"enabled\":true}]"
            Octopus.Action.Nginx.Server.ConfigName = "#{Octopus.Action.Package.PackageId}.#{Octopus.Environment.Name}#{if Octopus.Deployment.Tenant.Name}.#{Octopus.Deployment.Tenant.Name}#{/if}"
            Octopus.Action.Nginx.Server.Locations = "[{\"path\":\"/\",\"directives\":\"\",\"headers\":\"\",\"reverseProxy\":true,\"reverseProxyUrl\":\"http://localhost:80\",\"reverseProxyHeaders\":\"\",\"reverseProxyDirectives\":\"\"}]"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "PackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-gcloud-in-a-script" {
    name = "Run gcloud in a Script"

    action {
        action_type = "Octopus.GoogleCloudScripting"
        is_disabled = true
        properties = {
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.Project = "felix-464907"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "False"
            Octopus.Action.GoogleCloudAccount.Variable = "#{GoogleCloudAccountParameter}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = "gcloud projects list"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}

step "deploy-a-service-fabric-app" {
    name = "Deploy a Service Fabric App"
    properties = {
        Octopus.Action.TargetRoles = "#{ServiceFabricTargetTagParameter}"
    }

    action {
        action_type = "Octopus.AzureServiceFabricApp"
        is_disabled = true
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.ServiceFabric.OverrideUpgradeBehavior = "None"
            Octopus.Action.ServiceFabric.OverwriteBehavior = "SameAppTypeAndVersion"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{WindowsWorkerPoolParameter}"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "ServiceFabricPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "run-a-service-fabric-sdk-powershell-script" {
    name = "Run a Service Fabric SDK PowerShell Script"
    properties = {
        Octopus.Action.TargetRoles = "#{ServiceFabricTargetTagParameter}"
    }

    action {
        action_type = "Octopus.AzureServiceFabricPowerShell"
        is_disabled = true
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                Get-ServiceFabricNode
                Get-ServiceFabricApplication
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{WindowsWorkerPoolParameter}"
    }
}

step "deploy-a-vhd" {
    name = "Deploy a VHD"
    properties = {
        Octopus.Action.TargetRoles = "#{VHDTargetTagParameter}"
    }

    action {
        action_type = "Octopus.Vhd"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.Vhd,Octopus.Features.SubstituteInFiles"
            Octopus.Action.Vhd.DeployVhdToVm = "False"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "VHDPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "configure-certificate-for-wildfly-or-eap" {
    name = "Configure certificate for WildFly or EAP"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.WildFlyCertificateDeploy"
        is_disabled = true
        properties = {
            Java.Certificate.Password = "asdasd"
            Java.Certificate.Variable = "#{CertificateParameter}"
            WildFly.Deploy.CertificateProfiles = "default"
            WildFly.Deploy.CertificateRelativeTo = "NONE"
            WildFly.Deploy.Controller = "localhost"
            WildFly.Deploy.DeployCertificate = "True"
            WildFly.Deploy.Password = "#{WildflyManagementPasswordParameter}"
            WildFly.Deploy.Port = "9990"
            WildFly.Deploy.Protocol = "remote+http"
            WildFly.Deploy.ServerType = "Standalone"
            WildFly.Deploy.User = "felix"
        }
        worker_pool_variable = ""
    }
}

step "deploy-to-wildfly-or-eap" {
    name = "Deploy to WildFly or EAP"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.WildFlyDeploy"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.WildflyDeployCLI"
            WildFly.Deploy.Controller = "localhost"
            WildFly.Deploy.Enabled = "True"
            WildFly.Deploy.Name = "aaa.war"
            WildFly.Deploy.Password = "#{WildflyManagementPasswordParameter}"
            WildFly.Deploy.Port = "9990"
            WildFly.Deploy.Protocol = "remote+http"
            WildFly.Deploy.ServerType = "Standalone"
            WildFly.Deploy.User = "felix"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "JavaPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "enable-or-disable-deployment-in-wildfly-or-eap" {
    name = "Enable or Disable deployment in WildFly or EAP"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.WildFlyState"
        is_disabled = true
        properties = {
            WildFly.Deploy.Controller = "localhost"
            WildFly.Deploy.Enabled = "True"
            WildFly.Deploy.Name = "aaa.war"
            WildFly.Deploy.Password = "#{WildflyManagementPasswordParameter}"
            WildFly.Deploy.Port = "9990"
            WildFly.Deploy.Protocol = "remote+http"
            WildFly.Deploy.ServerType = "Standalone"
            WildFly.Deploy.User = "felix"
        }
        worker_pool_variable = ""
    }
}

step "deploy-to-tomcat-via-manager" {
    name = "Deploy to Tomcat via Manager"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.TomcatDeploy"
        is_disabled = true
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.TomcatDeployManager"
            Tomcat.Deploy.Controller = "http://localhost:8080/manager"
            Tomcat.Deploy.Enabled = "True"
            Tomcat.Deploy.Name = "myapp"
            Tomcat.Deploy.Password = "#{TomcatManagerPasswordParameter}"
            Tomcat.Deploy.User = "felix"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                PackageParameterName = "TomcatPackageParameter"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-a-certificate-to-tomcat" {
    name = "Deploy a certificate to Tomcat"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.TomcatDeployCertificate"
        is_disabled = true
        properties = {
            Java.Certificate.Variable = "#{CertificateParameter}"
            Tomcat.Certificate.CatalinaHome = "/usr/share/tomcat9"
            Tomcat.Certificate.Default = "False"
            Tomcat.Certificate.Implementation = "NIO"
            Tomcat.Certificate.Port = "443"
            Tomcat.Certificate.Service = "Catalina"
        }
        worker_pool_variable = ""
    }
}

step "start-or-stop-app-in-tomcat" {
    name = "Start or Stop App in Tomcat"
    properties = {
        Octopus.Action.TargetRoles = "#{NginxTargetTagParameter}"
    }

    action {
        action_type = "Octopus.TomcatState"
        is_disabled = true
        properties = {
            Tomcat.Deploy.Controller = "http://localhost:8080/manager"
            Tomcat.Deploy.Enabled = "False"
            Tomcat.Deploy.Name = "myapp"
            Tomcat.Deploy.Password = "#{TomcatManagerPasswordParameter}"
            Tomcat.Deploy.User = "felix"
        }
        worker_pool_variable = ""
    }
}

step "plan-a-terraform-destroy" {
    name = "Plan a Terraform destroy"

    action {
        action_type = "Octopus.TerraformPlanDestroy"
        is_disabled = true
        properties = {
            Octopus.Action.AzureAccount.Variable = "#{AzureAccountParameter}"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.Template = <<-EOT
                output "hello" {
                  value = "This is the token I am using: ${var.custom_token}!"
                }
                
                variable "custom_token" {
                  type    = string
                  default = "No token"
                }
                EOT
            Octopus.Action.Terraform.TemplateParameters = "{\"custom_token\":\"No token\"}"
        }
        worker_pool_variable = "#{LinuxWorkerPoolParameter}"

        container {
            feed = "#{ContainerFeedParameter}"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }
    }
}